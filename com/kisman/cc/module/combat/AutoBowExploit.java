//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\User\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package com.kisman.cc.module.combat;

import com.kisman.cc.settings.*;
import i.gishreloaded.gishcode.utils.*;
import com.kisman.cc.event.events.*;
import me.zero.alpine.listener.*;
import com.kisman.cc.module.*;
import java.util.function.*;
import com.kisman.cc.*;
import net.minecraft.util.*;
import net.minecraft.util.math.*;
import net.minecraft.network.*;
import net.minecraftforge.client.event.*;
import net.minecraft.client.renderer.*;
import net.minecraft.client.gui.*;
import com.kisman.cc.util.customfont.*;
import java.awt.*;
import com.kisman.cc.util.*;
import net.minecraftforge.fml.common.eventhandler.*;
import net.minecraft.entity.*;
import net.minecraft.network.play.client.*;
import net.minecraft.item.*;

public class AutoBowExploit extends Module
{
    private Setting autoFire;
    private Setting bypass;
    private Setting timeOut;
    private Setting spoofs;
    private Setting renderText;
    private Setting renderBar;
    private Setting yPosRender;
    private TimerUtils timer;
    private boolean shot;
    private int ticks;
    private long lastShotTime;
    private long percent;
    @EventHandler
    private final Listener<PacketEvent.Send> listener;
    
    public AutoBowExploit() {
        super("AutoBowExploit", "AWP", Category.COMBAT);
        this.autoFire = new Setting("AutoFire", this, true);
        this.bypass = new Setting("Bypass", this, false);
        this.timeOut = new Setting("TimeOut", this, 5000.0, 100.0, 20000.0, true);
        this.spoofs = new Setting("Spoofs", this, 10.0, 1.0, 300.0, true);
        this.renderText = new Setting("Text", this, true);
        this.renderBar = new Setting("Bar", this, true);
        this.yPosRender = new Setting("YPos", this, 0.0, 0.0, 120.0, true);
        this.timer = new TimerUtils();
        this.shot = false;
        this.ticks = 0;
        this.lastShotTime = 0L;
        this.percent = 0L;
        this.listener = (Listener<PacketEvent.Send>)new Listener(event -> {
            if (event.getPacket() instanceof CPacketPlayerDigging) {
                final CPacketPlayerDigging packet = (CPacketPlayerDigging)event.getPacket();
                if (packet.getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                    final ItemStack handStack = AutoBowExploit.mc.player.getHeldItem(EnumHand.MAIN_HAND);
                    if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof ItemBow && System.currentTimeMillis() - this.lastShotTime >= this.timeOut.getValInt() * 1000) {
                        this.shot = true;
                        this.lastShotTime = System.currentTimeMillis();
                        AutoBowExploit.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)AutoBowExploit.mc.player, CPacketEntityAction.Action.START_SPRINTING));
                        for (int index = 0; index < Integer.valueOf(this.spoofs.getValInt()).intValue() * 10; ++index) {
                            if (this.bypass.getValBoolean()) {
                                AutoBowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(AutoBowExploit.mc.player.posX, AutoBowExploit.mc.player.posY + 1.0E-5, AutoBowExploit.mc.player.posZ, false));
                                AutoBowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(AutoBowExploit.mc.player.posX, AutoBowExploit.mc.player.posY - 1.0E-5, AutoBowExploit.mc.player.posZ, true));
                            }
                            else {
                                AutoBowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(AutoBowExploit.mc.player.posX, AutoBowExploit.mc.player.posY - 1.0E-5, AutoBowExploit.mc.player.posZ, true));
                                AutoBowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(AutoBowExploit.mc.player.posX, AutoBowExploit.mc.player.posY + 1.0E-5, AutoBowExploit.mc.player.posZ, false));
                            }
                        }
                        this.shot = false;
                    }
                }
            }
        }, new Predicate[0]);
        AutoBowExploit.setmgr.rSetting(this.autoFire);
        AutoBowExploit.setmgr.rSetting(this.bypass);
        AutoBowExploit.setmgr.rSetting(this.timeOut);
        AutoBowExploit.setmgr.rSetting(this.spoofs);
        AutoBowExploit.setmgr.rSetting(new Setting("RenderLine", this, "Render(Ft moneymod+3)"));
        AutoBowExploit.setmgr.rSetting(this.renderText);
        AutoBowExploit.setmgr.rSetting(this.renderBar);
        AutoBowExploit.setmgr.rSetting(this.yPosRender);
    }
    
    @Override
    public void onEnable() {
        Kisman.EVENT_BUS.subscribe((Listener)this.listener);
        this.shot = false;
        this.ticks = 0;
        this.lastShotTime = System.currentTimeMillis();
    }
    
    @Override
    public void onDisable() {
        Kisman.EVENT_BUS.unsubscribe((Listener)this.listener);
        this.ticks = 0;
    }
    
    @Override
    public void update() {
        if (this.autoFire.getValBoolean() && AutoBowExploit.mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem() instanceof ItemBow && AutoBowExploit.mc.player.isHandActive() && AutoBowExploit.mc.player.getItemInUseMaxCount() >= 4 && this.autoFire.getValBoolean() && this.percent >= 100L) {
            ++this.ticks;
            if (this.ticks >= 12) {
                AutoBowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, AutoBowExploit.mc.player.getHorizontalFacing()));
                AutoBowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));
                AutoBowExploit.mc.player.stopActiveHand();
                this.ticks = 0;
            }
        }
        this.percent = (long)Math.min((System.currentTimeMillis() - this.lastShotTime) / (Integer.valueOf(this.timeOut.getValInt()).doubleValue() * 1000.0) * 100.0, 100.0);
    }
    
    @SubscribeEvent
    public void onRender(final RenderGameOverlayEvent event) {
        GlStateManager.pushMatrix();
        final ScaledResolution sr = new ScaledResolution(AutoBowExploit.mc);
        if (this.renderText.getValBoolean()) {
            CustomFontUtil.drawStringWithShadow(String.format("%s/100", this.percent) + "%", (int)(sr.getScaledWidth() / 2.0f - CustomFontUtil.getStringWidth(String.format("%s/100", this.percent) + "%") / 2.0f), (int)(sr.getScaledHeight() / 2.0f + 10.0f + Integer.valueOf(this.yPosRender.getValInt()).intValue()), new Color(170, 170, 170).getRGB());
        }
        if (this.renderBar.getValBoolean()) {
            Render2DUtil.drawRect(sr.getScaledWidth() / 2.0f - 21.0f, sr.getScaledHeight() / 2.0f + 20.0f + this.yPosRender.getValInt(), sr.getScaledWidth() / 2.0f + 23.0f, sr.getScaledHeight() / 2.0f + 25.0f + this.yPosRender.getValInt(), new Color(0, 0, 0, 140).getRGB());
            Render2DUtil.drawRect(sr.getScaledWidth() / 2.0f - 20.0f, sr.getScaledHeight() / 2.0f + 21.0f + this.yPosRender.getValInt(), sr.getScaledWidth() / 2.0f - 20.0f + this.percent * 0.42f, sr.getScaledHeight() / 2.0f + 24.0f + Integer.valueOf(this.yPosRender.getValInt()).intValue(), Color.red.getRGB());
        }
        GlStateManager.popMatrix();
    }
}
