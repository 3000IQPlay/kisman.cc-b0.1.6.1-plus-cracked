//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\User\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package com.kisman.cc.module.exploit;

import com.kisman.cc.settings.*;
import com.kisman.cc.event.events.*;
import me.zero.alpine.listener.*;
import com.kisman.cc.module.*;
import java.util.function.*;
import net.minecraft.util.text.*;
import com.kisman.cc.*;
import net.minecraft.entity.*;
import net.minecraft.network.*;
import i.gishreloaded.gishcode.utils.visual.*;
import net.minecraft.util.*;
import net.minecraft.network.play.client.*;
import net.minecraft.item.*;

public class BowExploit extends Module
{
    private Setting bows;
    private Setting eggs;
    private Setting pearls;
    private Setting snowballs;
    private Setting timeOut;
    private Setting spoofs;
    private Setting bypass;
    private Setting debug;
    private boolean shooting;
    private long lastShootTime;
    @EventHandler
    private final Listener<PacketEvent.Send> listener;
    
    public BowExploit() {
        super("BowExploit", "BowExploit", Category.EXPLOIT);
        this.bows = new Setting("Bows", this, true);
        this.eggs = new Setting("Eggs", this, true);
        this.pearls = new Setting("Pearls", this, true);
        this.snowballs = new Setting("SnowBalls", this, true);
        this.timeOut = new Setting("TimeOut", this, 5000.0, 100.0, 20000.0, true);
        this.spoofs = new Setting("Spoofs", this, 10.0, 1.0, 300.0, true);
        this.bypass = new Setting("Bypass", this, false);
        this.debug = new Setting("Debug", this, false);
        this.shooting = false;
        this.listener = (Listener<PacketEvent.Send>)new Listener(event -> {
            if (event.getPacket() instanceof CPacketPlayerDigging) {
                final CPacketPlayerDigging packet = (CPacketPlayerDigging)event.getPacket();
                if (packet.getAction() == CPacketPlayerDigging.Action.RELEASE_USE_ITEM) {
                    final ItemStack handStack = BowExploit.mc.player.getHeldItem(EnumHand.MAIN_HAND);
                    if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof ItemBow && this.bows.getValBoolean()) {
                        this.doSpoofs();
                        if (this.debug.getValBoolean() && !this.shooting) {
                            ChatUtils.error((Object)"Trying to spoof");
                        }
                    }
                }
            }
            else if (event.getPacket() instanceof CPacketPlayerTryUseItem) {
                final CPacketPlayerTryUseItem packet2 = (CPacketPlayerTryUseItem)event.getPacket();
                if (packet2.getHand() == EnumHand.MAIN_HAND) {
                    final ItemStack handStack = BowExploit.mc.player.getHeldItem(EnumHand.MAIN_HAND);
                    if (!handStack.isEmpty() && handStack.getItem() != null) {
                        if (handStack.getItem() instanceof ItemEgg && this.eggs.getValBoolean()) {
                            this.doSpoofs();
                        }
                        else if (handStack.getItem() instanceof ItemEnderPearl && this.pearls.getValBoolean()) {
                            this.doSpoofs();
                        }
                        else if (handStack.getItem() instanceof ItemSnowball && this.snowballs.getValBoolean()) {
                            this.doSpoofs();
                        }
                    }
                }
            }
        }, new Predicate[0]);
        super.setDisplayInfo("[" + this.spoofs.getValDouble() + TextFormatting.GRAY + "]");
        BowExploit.setmgr.rSetting(this.bows);
        BowExploit.setmgr.rSetting(this.eggs);
        BowExploit.setmgr.rSetting(this.pearls);
        BowExploit.setmgr.rSetting(this.snowballs);
        BowExploit.setmgr.rSetting(this.timeOut);
        BowExploit.setmgr.rSetting(this.spoofs);
        BowExploit.setmgr.rSetting(this.bypass);
        BowExploit.setmgr.rSetting(this.debug);
    }
    
    @Override
    public void onEnable() {
        Kisman.EVENT_BUS.subscribe((Listener)this.listener);
    }
    
    @Override
    public void onDisable() {
        Kisman.EVENT_BUS.unsubscribe((Listener)this.listener);
    }
    
    private void doSpoofs() {
        if (System.currentTimeMillis() - this.lastShootTime >= this.timeOut.getValDouble()) {
            this.shooting = false;
            this.lastShootTime = System.currentTimeMillis();
            BowExploit.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)BowExploit.mc.player, CPacketEntityAction.Action.START_SPRINTING));
            for (int index = 0; index < this.spoofs.getValDouble(); ++index) {
                if (this.bypass.getValBoolean()) {
                    BowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowExploit.mc.player.posX, BowExploit.mc.player.posY + 1.0E-10, BowExploit.mc.player.posZ, false));
                    BowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowExploit.mc.player.posX, BowExploit.mc.player.posY - 1.0E-10, BowExploit.mc.player.posZ, true));
                }
                else {
                    BowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowExploit.mc.player.posX, BowExploit.mc.player.posY - 1.0E-10, BowExploit.mc.player.posZ, true));
                    BowExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(BowExploit.mc.player.posX, BowExploit.mc.player.posY + 1.0E-10, BowExploit.mc.player.posZ, false));
                }
            }
            if (this.debug.getValBoolean()) {
                ChatUtils.complete((Object)"Spoofed");
            }
            this.shooting = true;
        }
    }
}
