//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\User\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package com.kisman.cc.module.exploit;

import com.kisman.cc.settings.*;
import com.kisman.cc.module.*;
import org.lwjgl.input.*;
import com.kisman.cc.util.*;
import net.minecraft.util.*;
import net.minecraft.entity.player.*;
import net.minecraft.world.*;
import net.minecraft.util.math.*;
import net.minecraft.init.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;

public class MiddleClick extends Module
{
    private Setting mode;
    private Setting switchMode;
    
    public MiddleClick() {
        super("MiddleClick", "MiddleClick", Category.EXPLOIT);
        this.mode = new Setting("Mode", this, Mode.Obby);
        this.switchMode = new Setting("SwitchMode", this, SwitchMode.Silent);
        MiddleClick.setmgr.rSetting(this.mode);
        MiddleClick.setmgr.rSetting(this.switchMode);
    }
    
    @Override
    public void update() {
        if (MiddleClick.mc.player == null && MiddleClick.mc.world == null) {
            return;
        }
        if (MiddleClick.mc.currentScreen == null && Mouse.isButtonDown(2)) {
            final int oldSlot = MiddleClick.mc.player.inventory.currentItem;
            final String valString = this.mode.getValString();
            switch (valString) {
                case "Exp": {
                    final int expSlot = InventoryUtil.findItem(Items.ENDER_PEARL, 0, 9);
                    if (expSlot == -1) {
                        break;
                    }
                    final String valString2 = this.switchMode.getValString();
                    switch (valString2) {
                        case "Normal": {
                            InventoryUtil.switchToSlot(expSlot, false);
                        }
                        case "Silent": {
                            InventoryUtil.switchToSlot(expSlot, true);
                            break;
                        }
                    }
                    MiddleClick.mc.player.inventory.currentItem = expSlot;
                    MiddleClick.mc.playerController.processRightClick((EntityPlayer)MiddleClick.mc.player, (World)MiddleClick.mc.world, EnumHand.MAIN_HAND);
                    break;
                }
                case "Pearl": {
                    final int pearlSlot = InventoryUtil.findItem(Items.ENDER_PEARL, 0, 9);
                    if (pearlSlot == -1) {
                        break;
                    }
                    final String valString3 = this.switchMode.getValString();
                    switch (valString3) {
                        case "Normal": {
                            InventoryUtil.switchToSlot(pearlSlot, false);
                        }
                        case "Silent": {
                            InventoryUtil.switchToSlot(pearlSlot, true);
                            break;
                        }
                    }
                    MiddleClick.mc.player.inventory.currentItem = pearlSlot;
                    MiddleClick.mc.playerController.processRightClick((EntityPlayer)MiddleClick.mc.player, (World)MiddleClick.mc.world, EnumHand.MAIN_HAND);
                    break;
                }
                case "Obby": {
                    if (MiddleClick.mc.objectMouseOver == null) {
                        return;
                    }
                    if (MiddleClick.mc.objectMouseOver.typeOfHit != RayTraceResult.Type.BLOCK) {
                        break;
                    }
                    final int obbySlot = InventoryUtil.findBlock(Blocks.OBSIDIAN, 0, 9);
                    if (obbySlot == -1) {
                        break;
                    }
                    final String valString4 = this.switchMode.getValString();
                    switch (valString4) {
                        case "Normal": {
                            InventoryUtil.switchToSlot(obbySlot, false);
                        }
                        case "Silent": {
                            InventoryUtil.switchToSlot(obbySlot, true);
                            break;
                        }
                    }
                    MiddleClick.mc.player.inventory.currentItem = obbySlot;
                    MiddleClick.mc.player.connection.sendPacket((Packet)new CPacketPlayerTryUseItemOnBlock());
                    break;
                }
            }
            if (this.switchMode.getValString().equals(SwitchMode.Silent.name()) && oldSlot != -1) {
                InventoryUtil.switchToSlot(oldSlot, true);
            }
        }
    }
    
    public enum Mode
    {
        Exp, 
        Pearl, 
        Obby;
    }
    
    public enum SwitchMode
    {
        Normal, 
        Silent;
    }
}
