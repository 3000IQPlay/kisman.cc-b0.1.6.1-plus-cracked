//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\User\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package com.kisman.cc.module.exploit;

import com.kisman.cc.settings.*;
import i.gishreloaded.gishcode.utils.*;
import me.zero.alpine.listener.*;
import com.kisman.cc.event.events.*;
import com.kisman.cc.module.*;
import java.util.*;
import java.util.function.*;
import com.kisman.cc.*;
import com.kisman.cc.event.*;
import com.kisman.cc.util.*;
import net.minecraft.network.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.play.client.*;

public class PacketFly extends Module
{
    private Setting antiKick;
    private Setting mode;
    private Random random;
    private TimerUtils timer;
    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener;
    @EventHandler
    private final Listener<EventPlayerMotionUpdate> playerMotionUpdateListener;
    
    public PacketFly() {
        super("PacketFly", "PacketFly", Category.EXPLOIT);
        this.antiKick = new Setting("AntiKick", this, false);
        this.mode = new Setting("Mode", this, "Up", new ArrayList<String>(Arrays.asList("Preserve", "Up", "Down")));
        this.random = new Random();
        this.timer = new TimerUtils();
        this.receiveListener = (Listener<PacketEvent.Receive>)new Listener(event -> {
            if (event.getPacket() instanceof SPacketPlayerPosLook && PacketFly.mc.currentScreen == null) {
                final SPacketPlayerPosLook packet = (SPacketPlayerPosLook)event.getPacket();
                PacketFly.mc.player.connection.sendPacket((Packet)new CPacketConfirmTeleport(packet.getTeleportId()));
                PacketFly.mc.player.connection.sendPacket((Packet)new CPacketPlayer.PositionRotation(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
                PacketFly.mc.player.setPosition(packet.getX(), packet.getY(), packet.getZ());
                event.cancel();
            }
        }, new Predicate[0]);
        this.playerMotionUpdateListener = (Listener<EventPlayerMotionUpdate>)new Listener(event -> {
            if (event.getEra() != Event.Era.PRE) {
                return;
            }
            PacketFly.mc.player.setVelocity(0.0, 0.0, 0.0);
            event.cancel();
            float speedY = 0.0f;
            if (PacketFly.mc.player.movementInput.jump) {
                if (!this.timer.hasReached(3000.0f)) {
                    speedY = ((PacketFly.mc.player.ticksExisted == 0) ? -0.04f : 0.031f);
                }
                else {
                    this.timer.reset();
                    speedY = -0.08f;
                }
            }
            else if (PacketFly.mc.player.movementInput.sneak) {
                speedY = -0.0031f;
            }
            else if (PacketFly.mc.player.ticksExisted % 4 == 0 && this.antiKick.getValBoolean()) {
                speedY = -0.04f;
            }
            final double[] dir = MathUtil.directionSpeed(0.031);
            PacketFly.mc.player.motionX = dir[0];
            PacketFly.mc.player.motionY = speedY;
            PacketFly.mc.player.motionZ = dir[1];
            PacketFly.mc.player.connection.sendPacket((Packet)new CPacketPlayer.PositionRotation(PacketFly.mc.player.posX + PacketFly.mc.player.motionX, PacketFly.mc.player.posY + PacketFly.mc.player.motionY, PacketFly.mc.player.posZ + PacketFly.mc.player.motionY, PacketFly.mc.player.cameraYaw, PacketFly.mc.player.cameraPitch, PacketFly.mc.player.onGround));
            double x = PacketFly.mc.player.posX + PacketFly.mc.player.motionX;
            double y = PacketFly.mc.player.posY + PacketFly.mc.player.motionY;
            double z = PacketFly.mc.player.posZ + PacketFly.mc.player.motionZ;
            final String valString = this.mode.getValString();
            switch (valString) {
                case "Down": {
                    y += 1337.0;
                    break;
                }
                case "Preserve": {
                    x += this.random.nextInt(100000);
                    z += this.random.nextInt(100000);
                    break;
                }
                case "Up": {
                    y += 1337.0;
                    break;
                }
            }
            PacketFly.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(x, y, z, PacketFly.mc.player.onGround));
        }, new Predicate[0]);
        PacketFly.setmgr.rSetting(this.antiKick);
        PacketFly.setmgr.rSetting(this.mode);
    }
    
    @Override
    public void onEnable() {
        Kisman.EVENT_BUS.subscribe((Listener)this.receiveListener);
        Kisman.EVENT_BUS.subscribe((Listener)this.playerMotionUpdateListener);
    }
    
    @Override
    public void onDisable() {
        Kisman.EVENT_BUS.unsubscribe((Listener)this.receiveListener);
        Kisman.EVENT_BUS.unsubscribe((Listener)this.playerMotionUpdateListener);
    }
}
